[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
  "hatch-fancy-pypi-readme",
  "hatch-mkdocs",
]

[project]
name = "mini-racer"
dynamic = ["version", "readme"]
description = "Minimal, modern embedded V8 for Python."
license = "ISC"
requires-python = ">= 3.8"
authors = [
    { name = "bpcreech", email = "mini-racer@bpcreech.com" },
    { name = "Sqreen", email = "support@sqreen.com" },
]
keywords = [
    "py_mini_racer",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: ISC License (ISCL)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
]

[project.urls]
Homepage = "https://github.com/bpcreech/PyMiniRacer"

[tool.hatch.version]
path = "src/py_mini_racer/__about__.py"

[tool.hatch.build.targets.wheel]
# The PyPI package is mini_racer (forked from py_mini_racer) but we keep the original
# Python module name since this is intended to be a permanent, drop-in replacement:
packages = ["src/py_mini_racer"]

[tool.hatch.build.targets.wheel.hooks.custom]
path = "./hatch_build.py"

dependencies = [
  # Used by depot_tools:
  "httplib2",

  # Used by the build hook directly:
  "packaging",
]

[tool.hatch.envs.default.scripts]
test = "pytest --ignore=v8_workspace {args:tests}"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """
## Release history
"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "HISTORY.md"
start-after = "# History"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = "\\(py_mini_racer.png\\)"
replacement = '(https://github.com/bpcreech/PyMiniRacer/raw/main/py_mini_racer.png)'

[tool.hatch.envs.default]
dependencies = [
  "pytest",
]

[tool.hatch.env.collectors.mkdocs.docs]
path = "mkdocs.yml"

[tool.hatch.envs.docs]
detached = true

dependencies = [
  "mdformat",
  "mdformat-mkdocs",
]

[tool.hatch.envs.docs.scripts]
fmt = [
  "mdformat *.md",
]

[tool.hatch.envs.test.scripts]
run-coverage = "pytest --cov-config=pyproject.toml --cov=py_mini_racer --cov=tests --ignore=v8_workspace {args}"
run = "run-coverage --no-cov"

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
  "pytest-asyncio",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

# An environment to test installed wheels
[tool.hatch.envs.testinstalled]
# Inherit from the ordinary test setup:
template = "test"
# but don't install py_mini_racer. We'll install it manually from wheels:
skip-install = true

dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
  "pytest-asyncio",
]

[[tool.hatch.envs.testinstalled.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.testinstalled.scripts]
# A weird trick to smuggle the just-built wheel into the env, for matrix testing:
install = "pip install {args}"

[tool.hatch.envs.types]
# To avoid running the whole C++ V8 build just to check Python types, run detached:
detached = true

dependencies = [
  "hatchling",
  "mypy>=1.0.0",
  "pytest",
]

[tool.hatch.envs.types.scripts]
# Because we run detached (see above), we have to tell mypy where our source is:
check = "PYTHONPATH=src mypy --install-types --strict --non-interactive {args:src}"

[tool.ruff]
# Hatch changes this from the Black default. Change it back:
line-length = 88

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.coverage.run]
omit = [
    "tests/*",
]
